import pandas as pd
import plotly.express as px

def info_general(df: pd.DataFrame):
    cantidad_incapacidades = df.shape[0]
    colaboradores = df['c.c_colaborador'].nunique()
    costo_total = round(df['costo_total_incapacidad'].sum())

    return cantidad_incapacidades, colaboradores, costo_total

def obtener_metricas_comparativas_mensuales(df: pd.DataFrame):
    """
    Retorna m칠tricas individuales del 칰ltimo mes y su comparaci칩n con el mes anterior.

    Par치metros:
    df -- DataFrame con columnas: 'a침o', 'mes', 'c.c_colaborador', 'costo_total_incapacidad'

    Retorna (en orden):
    a침o_actual, mes_actual,
    a침o_anterior, mes_anterior,
    colaboradores_actual, colaboradores_anterior, variacion_colaboradores,
    incapacidades_actual, incapacidades_anterior, variacion_incapacidades,
    costo_total_actual, costo_total_anterior, variacion_costo_total
    """
    # 칔ltimo a침o y mes
    ultimo_a침o = df[df['a침o'] == df['a침o'].max()]
    a침o_actual = ultimo_a침o['a침o'].max()
    mes_actual = ultimo_a침o['mes'].max()
    mes_anterior = mes_actual - 1
    a침o_anterior = a침o_actual  # Asume mismo a침o

    # Filtrar meses
    ultimo_mes = ultimo_a침o[ultimo_a침o['mes'] == mes_actual]
    anterior_mes_df = ultimo_a침o[ultimo_a침o['mes'] == mes_anterior]

    # Colaboradores (n칰mero de registros)
    colaboradores_actual = ultimo_mes.shape[0]
    colaboradores_anterior = anterior_mes_df.shape[0]
    variacion_colaboradores = round((colaboradores_actual - colaboradores_anterior) / colaboradores_anterior * 100, 2) if colaboradores_anterior != 0 else None

    # Incapacidades 칰nicas
    incapacidades_actual = ultimo_mes['c.c_colaborador'].nunique()
    incapacidades_anterior = anterior_mes_df['c.c_colaborador'].nunique()
    variacion_incapacidades = round((incapacidades_actual - incapacidades_anterior) / incapacidades_anterior * 100, 2) if incapacidades_anterior != 0 else None

    # Costo total
    costo_total_actual = round(ultimo_mes['costo_total_incapacidad'].sum())
    costo_total_anterior = round(anterior_mes_df['costo_total_incapacidad'].sum())
    variacion_costo_total = round((costo_total_actual - costo_total_anterior) / costo_total_anterior * 100, 2) if costo_total_anterior != 0 else None

    return a침o_actual, mes_actual,  a침o_anterior, mes_anterior, colaboradores_actual, colaboradores_anterior, variacion_colaboradores, incapacidades_actual, incapacidades_anterior, variacion_incapacidades, costo_total_actual, costo_total_anterior, variacion_costo_total
    
def obtener_diagnosticos_y_graficas(df: pd.DataFrame):
    """
    Calcula y retorna:
    - Tabla resumen con las columnas: cantidad_incapacidades, dias_ausentes, costo_diagnostico
    - Gr치fico de pastel (pie chart) con top 10 diagn칩sticos por d칤as ausentes
    - Gr치fico de barras (bar chart) con top 10 diagn칩sticos por costo total

    Par치metros:
    df -- DataFrame original con columnas:
          'incapacidad_diagn칩stico', 'incapacidad_dias', 'costo_total_incapacidad'

    Retorna:
    - df_top (DataFrame con m칠tricas)
    - fig_pie (plotly.graph_objects.Figure)
    - fig_bar (plotly.graph_objects.Figure)
    """

    # Diagn칩sticos m치s frecuentes
    top_10_diagnosticos = (
        df.groupby('incapacidad_diagn칩stico')['incapacidad_diagn칩stico']
        .count()
        .reset_index(name='cantidad_incapacidades')
        .sort_values(by='cantidad_incapacidades', ascending=False)
    )

    # D칤as ausentes
    top_10_diagnosticos_dias = (
        df.groupby('incapacidad_diagn칩stico')['incapacidad_dias']
        .sum()
        .reset_index(name='dias_ausentes')
    )

    # Costo por diagn칩stico
    costo_diagnostico = (
        df.groupby('incapacidad_diagn칩stico')['costo_total_incapacidad']
        .sum()
        .reset_index(name='costo_diagnostico')
    )

    # Merge
    df_top = pd.merge(top_10_diagnosticos, top_10_diagnosticos_dias, on='incapacidad_diagn칩stico', how='left')
    df_top = pd.merge(df_top, costo_diagnostico, on='incapacidad_diagn칩stico', how='left')
    df_top['costo_diagnostico'] = df_top['costo_diagnostico'].round()

    # Pie chart - top 10 por d칤as ausentes
    df_top_pie = df_top.sort_values(by='dias_ausentes', ascending=False).head(10)
    fig_pie = px.pie(
        df_top_pie,
        names='incapacidad_diagn칩stico',
        values='dias_ausentes',
        title='Top 10 Diagn칩sticos con m치s D칤as de Incapacidad',
        hole=0.3
    )

    # Bar chart - top 10 por costo
    df_top_bar = df_top.sort_values(by='costo_diagnostico', ascending=False).head(10)
    fig_bar = px.bar(
        df_top_bar,
        x='incapacidad_diagn칩stico',
        y='costo_diagnostico',
        title='Top 10 Diagn칩sticos con Mayor Costo Total',
        labels={'incapacidad_diagn칩stico': 'Diagn칩stico', 'costo_diagnostico': 'Costo ($)'},
    )
    fig_bar.update_layout(xaxis_tickangle=-45)

    return df_top, fig_pie, fig_bar

def obtener_historico_dias_y_grafica(df: pd.DataFrame):
    """
    Genera una tabla y un gr치fico de l칤nea con el hist칩rico mensual de d칤as perdidos por incapacidad.

    Par치metros:
    df -- DataFrame original con columnas: 'a침o', 'mes', 'incapacidad_dias'

    Retorna:
    - historico_dias_completo (DataFrame con columnas: a침o, mes, dias_perdidos)
    - fig_line (plotly.graph_objects.Figure con la evoluci칩n de d칤as perdidos)
    """

    # Agrupar por a침o y mes
    historico = (
        df.groupby(['a침o', 'mes'])['incapacidad_dias']
        .sum()
        .reset_index(name='dias_perdidos')
    )

    # Asegurar formato entero
    historico['a침o'] = historico['a침o'].astype(int)
    historico['mes'] = historico['mes'].astype(int)

    # Crear columna de fecha (1er d칤a del mes)
    historico['date'] = pd.to_datetime(historico['a침o'].astype(str) + '-' + historico['mes'].astype(str) + '-01')

    # Crear rango completo de fechas
    date_range = pd.date_range(start=historico['date'].min(), end=historico['date'].max(), freq='MS')
    df_full = pd.DataFrame({'date': date_range})
    df_full['a침o'] = df_full['date'].dt.year
    df_full['mes_num'] = df_full['date'].dt.month

    # Unir con los datos originales
    df_full = df_full.merge(
        historico[['a침o', 'mes', 'dias_perdidos']],
        left_on=['a침o', 'mes_num'],
        right_on=['a침o', 'mes'],
        how='left'
    )
    df_full['dias_perdidos'] = df_full['dias_perdidos'].fillna(0)

    # Asignar nombre de mes y ordenar
    df_full['mes'] = df_full['date'].dt.month_name()
    historico_dias_completo = df_full[['a침o', 'mes', 'dias_perdidos']].copy()

    historico_dias_completo['mes'] = pd.Categorical(
        historico_dias_completo['mes'],
        categories=[
            'January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'
        ],
        ordered=True
    )
    historico_dias_completo = historico_dias_completo.sort_values(by=['a침o', 'mes'])

    # Gr치fico de l칤nea
    fig_line = px.line(
        df_full,
        x='date',
        y='dias_perdidos',
        title='Evoluci칩n Mensual de D칤as Perdidos por Incapacidad',
        labels={'dias_perdidos': 'D칤as Perdidos', 'date': 'Fecha'},
        markers=True
    )

    return historico_dias_completo, fig_line


def obtener_historico_costo_y_grafica(df: pd.DataFrame):
    """
    Calcula el hist칩rico mensual de costo por incapacidades y genera un gr치fico de barras,
    coloreado por nombre del mes.

    Par치metros:
    df -- DataFrame con columnas: 'a침o', 'mes', 'costo_total_incapacidad'

    Retorna:
    - historico_costo_completo (DataFrame con columnas: a침o, mes, costo_total)
    - fig_bar (plotly.graph_objects.Figure)
    """

    # Agrupaci칩n
    historico_costo = (
        df.groupby(['a침o', 'mes'])['costo_total_incapacidad']
        .sum()
        .reset_index(name='costo_total')
    )
    historico_costo['a침o'] = historico_costo['a침o'].astype(int)
    historico_costo['mes'] = historico_costo['mes'].astype(int)
    historico_costo['date'] = pd.to_datetime(historico_costo['a침o'].astype(str) + '-' + historico_costo['mes'].astype(str) + '-01')

    # Relleno de fechas faltantes
    date_range = pd.date_range(start=historico_costo['date'].min(), end=historico_costo['date'].max(), freq='MS')
    df_full_cost = pd.DataFrame({'date': date_range})
    df_full_cost['a침o'] = df_full_cost['date'].dt.year
    df_full_cost['mes_num'] = df_full_cost['date'].dt.month

    df_full_cost = df_full_cost.merge(
        historico_costo[['a침o', 'mes', 'costo_total']],
        left_on=['a침o', 'mes_num'],
        right_on=['a침o', 'mes'],
        how='left'
    )
    df_full_cost['costo_total'] = df_full_cost['costo_total'].fillna(0)

    # Agregar nombre del mes y formato de fecha
    df_full_cost['mes'] = df_full_cost['date'].dt.month_name()
    df_full_cost['label'] = df_full_cost['date'].dt.strftime('%Y-%m')
    df_full_cost['a침o'] = df_full_cost['a침o'].astype(str)

    # Ordenar tabla
    historico_costo_completo = df_full_cost[['a침o', 'mes', 'costo_total']].copy()
    historico_costo_completo['mes'] = pd.Categorical(
        historico_costo_completo['mes'],
        categories=[
            'January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'
        ],
        ordered=True
    )
    historico_costo_completo = historico_costo_completo.sort_values(by=['a침o', 'mes'])
    historico_costo_completo['costo_total'] = historico_costo_completo['costo_total'].round()

    # 游꿛 Gr치fico de barras con color por mes
    fig_bar = px.bar(
        df_full_cost,
        x='label',
        y='costo_total',
        color='mes',
        title='Costo Mensual Total por Incapacidades (coloreado por mes)',
        labels={'label': 'Mes-A침o', 'costo_total': 'Costo Total ($)', 'mes': 'Mes'},
        color_discrete_sequence=px.colors.qualitative.Set3
    )
    fig_bar.update_layout(xaxis_tickangle=-45)

    return historico_costo_completo, fig_bar