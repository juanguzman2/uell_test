import streamlit as st


st.title("‚öôÔ∏è Ejercicio 2 - Automatizaci√≥n del Reporte")
st.markdown("---")

st.markdown("""
### üß† Enfoque Propuesto

Para automatizar estos reportes y escalar la soluci√≥n a m√∫ltiples clientes, propongo una arquitectura modular, parametrizable y eficiente, en la que cada cliente tenga su propio pipeline de procesamiento, manteniendo el control y la trazabilidad de su informaci√≥n.

---

### üì• Carga de Informaci√≥n

Cada cliente contar√≠a con una aplicaci√≥n sencilla para cargar sus archivos o registros.  
Cuando los clientes ya cargaron su informacion se almacenan en servicios como Amazon S3 o Azure Blob Storage, seg√∫n el proveedor. Esto permite mantener hist√≥ricos seguros y escalables, y facilita la integraci√≥n con pipelines que usan Spark o Pandas.

---

### üõ†Ô∏è Procesamiento y Transformaci√≥n

Una vez almacenados, los datos se procesan mediante pipelines desarrollados en **Spark, SQL, Python y Pandas**, adaptados seg√∫n las reglas de negocio de cada cliente.  
Esta etapa incluye limpieza, enriquecimiento, validaciones autom√°ticas y preparaci√≥n para an√°lisis.

---

### üìä Generaci√≥n del Dashboard

Con la informaci√≥n procesada, se generan dashboards interactivos y personalizados usando herramientas como **Power BI, Amazon QuickSight, Tableau o Streamlit**, dependiendo del entorno o requerimiento del cliente.  
Estos dashboards reflejan en tiempo real las m√©tricas clave y pueden adaptarse por perfil de usuario o nivel de acceso.

---

### üîç Modelos Predictivos (Opcional)

En escenarios m√°s avanzados, se pueden incorporar modelos de machine learning, como el que desarroll√© para detectar incapacidades inv√°lidas.  
Este flujo puede automatizarse y monitorearse usando **MLflow**, con control de calidad, detecci√≥n de *data drift* y programaci√≥n de reentrenamientos.  
Los resultados se exponen a trav√©s de una **API REST (FastAPI)**, lo que permite integrarlos f√°cilmente con otros sistemas.

---

### üîÑ Automatizaci√≥n y Escalabilidad

Todo el pipeline puede orquestarse con **Apache Airflow**, asegurando ejecuciones programadas, control de dependencias y notificaciones ante errores.  
La soluci√≥n es f√°cilmente escalable a la nube (**AWS, Azure o GCP**), lo que permite alojar cada m√≥dulo como microservicio, contenerizado con **Docker**, desplegado en **Kubernetes** si es necesario, y gestionado en entornos colaborativos con **Git**.

---

### üîê Seguridad y Multi-Tenencia

Cada cliente tendr√≠a un acceso seguro a su dashboard y sus datos, completamente aislados del resto, garantizando privacidad y control.  
La soluci√≥n se configura para un nuevo cliente y, desde el d√≠a siguiente, el sistema comienza a generar sus reportes de forma autom√°tica.
            
---
            
### üí∏ Optimizaci√≥n de Costos

La arquitectura est√° dise√±ada para ser flexible y costo-efectiva:

- Para entornos peque√±os, se aprovechan tecnolog√≠as **open source** y recursos locales o en la nube con baja demanda.
- En soluciones m√°s complejas, se habilita escalado bajo demanda con servicios como **AWS Lambda, Glue, o Fargate**, pagando solo por uso.
- Se evitan reprocesamientos innecesarios con almacenamiento hist√≥rico.
            
---
            
### üì§ Entrega del Reporte
Los reportes se generan autom√°ticamente en PDF o Excel con librer√≠as como pandas + Jinja2 o openpyxl y se entregan por correo, integraciones con Slack, o a trav√©s de una interfaz web. Se almacenan versiones hist√≥ricas para auditor√≠a y trazabilidad.
            
""")
